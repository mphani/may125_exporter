# This workflow will build a golang project
# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build exporter artifacts

on:
  push:
    tags:
      - 'v*'

permissions:
  id-token: write
  actions: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            make_target: package-linux-amd64
            goarch: amd64
            tar_arch: x86_64
          - arch: arm64
            make_target: package-linux-arm64
            goarch: arm64
            tar_arch: aarch64

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

      - name: Set up Snyk CLI
        uses: snyk/actions/setup@master

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
           go-version: 1.20.2
  
      - name: go mod tidy
        run: |
            dpkg-architecture -q DEB_BUILD_ARCH
            (git describe --tags --always --abbrev=0 | cut -c 1-)
            go mod tidy
              
      - name: Install FPM deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm

      - name: Install FPM
        run: |
          sudo gem install --no-document fpm
          fpm --version

      - name: Build deb/rpm for ${{ matrix.arch }}
        run: make ${{ matrix.make_target }}

      - name: Build tar for ${{ matrix.arch }}
        run: make tar GOOS=linux GOARCH=${{ matrix.goarch }} ARCH=${{ matrix.tar_arch }}

      - name: Gzip tar to .tgz
        run: |
          cd pkg/target
          gzip aerospike-prometheus-exporter*.tar
          for f in *.tar.gz; do
            echo "Moving tar-gzipped filename - "$f
            mv "$f" "${f%.tar.gz}.tgz"
          done

      - name: Upload all artifacts
        env:
          GH_TOKEN: ${{ github.token }}
          TAG_NAME: ${{ steps.get-latest-tag.outputs.tag }}
        run: |
          files=$(find pkg/target -type f -name "aerospike-prome*" -printf "%p ")
          for file in $files; do
            echo "Uploading $file to release $TAG_NAME"
            gh release upload "$TAG_NAME" "$file"
          done
          
